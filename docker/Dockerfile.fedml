FROM nvidia/cuda:11.0-devel-ubuntu18.04

##############################################################################
# Configurable Version
##############################################################################
ARG PYTORCH_VERSION=1.9.0
ARG NEW_NCCL_VERSION=2.10.3
ENV NCCL_VERSION=${NEW_NCCL_VERSION}

##############################################################################
# Temporary Installation Directory
##############################################################################
ENV STAGE_DIR=/tmp
RUN mkdir -p ${STAGE_DIR}

##############################################################################
# Installation/Basic Utilities
##############################################################################
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        software-properties-common build-essential autotools-dev \
        nfs-common pdsh \
        cmake g++ gcc \
        curl wget vim tmux emacs less unzip \
        htop iftop iotop ca-certificates openssh-client openssh-server \
        rsync iputils-ping net-tools sudo \
        llvm-9-dev \
        libaio-dev

##############################################################################
# Installation Latest Git
##############################################################################
RUN add-apt-repository ppa:git-core/ppa -y && \
    apt-get update && \
    apt-get install -y git && \
    git --version

##############################################################################
# OPENMPI
##############################################################################
ENV OPENMPI_BASEVERSION=4.0
ENV OPENMPI_VERSION=${OPENMPI_BASEVERSION}.1
RUN cd ${STAGE_DIR} && \
    wget -q -O - https://download.open-mpi.org/release/open-mpi/v${OPENMPI_BASEVERSION}/openmpi-${OPENMPI_VERSION}.tar.gz | tar xzf - && \
    cd openmpi-${OPENMPI_VERSION} && \
    ./configure --prefix=/usr/local/openmpi-${OPENMPI_VERSION} && \
    make -j"$(nproc)" install && \
    ln -s /usr/local/openmpi-${OPENMPI_VERSION} /usr/local/mpi && \
    # Sanity check:
    test -f /usr/local/mpi/bin/mpic++ && \
    cd ${STAGE_DIR} && \
    rm -r ${STAGE_DIR}/openmpi-${OPENMPI_VERSION}
ENV PATH=/usr/local/mpi/bin:${PATH} \
    LD_LIBRARY_PATH=/usr/local/lib:/usr/local/mpi/lib:/usr/local/mpi/lib64:${LD_LIBRARY_PATH}
# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/mpi/bin/mpirun /usr/local/mpi/bin/mpirun.real && \
    echo '#!/bin/bash' > /usr/local/mpi/bin/mpirun && \
    echo 'mpirun.real --allow-run-as-root --prefix /usr/local/mpi "$@"' >> /usr/local/mpi/bin/mpirun && \
    chmod a+x /usr/local/mpi/bin/mpirun

##############################################################################
# Python
##############################################################################
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHON_VERSION=3
RUN apt-get install -y python3 python3-dev && \
    rm -f /usr/bin/python && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    curl -O https://bootstrap.pypa.io/get-pip.py && \
        python get-pip.py && \
        rm get-pip.py && \
    pip install --upgrade pip && \
    # Print python an pip version
    python -V && pip -V
RUN pip install pyyaml
RUN pip install ipython

RUN apt-get update && \
    apt-get install -y vim git tmux wget curl autoconf libtool apt-utils
##############################################################################
# EFA Setup
##############################################################################
RUN cd ${STAGE_DIR} && curl -O  https://efa-installer.amazonaws.com/aws-efa-installer-1.12.3.tar.gz && tar -xf aws-efa-installer-1.12.3.tar.gz && cd aws-efa-installer && sudo ./efa_installer.sh -y -d -g  --skip-kmod --skip-limit-conf --no-verify

##############################################################################
# NCCL Version Upgrade
##############################################################################
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub && add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /" && apt update && apt install -y --allow-change-held-packages libnccl2=${NCCL_VERSION}-1+cuda11.0 libnccl-dev=${NCCL_VERSION}-1+cuda11.0

##############################################################################
# TensorFlow
##############################################################################
ENV TENSORFLOW_VERSION=1.15.2
RUN pip install tensorflow-gpu==${TENSORFLOW_VERSION}

##############################################################################
# Some Packages
##############################################################################
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libsndfile-dev \
        libcupti-dev \
        libjpeg-dev \
        libpng-dev \
        screen
RUN pip install psutil \
                yappi \
                cffi \
                ipdb \
                pandas \
                matplotlib \
                py3nvml \
                pyarrow \
                graphviz \
                astor \
                boto3 \
                tqdm \
                sentencepiece \
                msgpack \
                requests \
                pandas \
                sphinx \
                sphinx_rtd_theme \
                scipy \
                numpy \
                sklearn \
                scikit-learn \
                nvidia-ml-py3 \
                mpi4py \
                cupy-cuda110 \
                cython \
                sacremoses>=0.0.38 \
                sacrebleu \
                nltk \
                packaging \
                regex \
                protobuf \
                torchvision \
                paho-mqtt \
                setproctitle

##############################################################################
## SSH daemon port inside container cannot conflict with host OS port
###############################################################################
#ENV SSH_PORT=2222
#RUN cat /etc/ssh/sshd_config > ${STAGE_DIR}/sshd_config && \
#    sed "0,/^#Port 22/s//Port ${SSH_PORT}/" ${STAGE_DIR}/sshd_config > /etc/ssh/sshd_config

##############################################################################
# PyTorch
##############################################################################
RUN sudo pip3 install numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing_extensions future six requests dataclasses h5py
RUN cd ${STAGE_DIR} && git clone https://github.com/pytorch/pytorch.git && cd pytorch && git checkout v${PYTORCH_VERSION} && git submodule sync && git submodule update --init --recursive && sudo USE_SYSTEM_NCCL=1 TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 7.5 8.0" python3 setup.py install

##############################################################################
# PyYAML build issue
# https://stackoverflow.com/a/53926898
##############################################################################
RUN rm -rf /usr/lib/python3/dist-packages/yaml && \
    rm -rf /usr/lib/python3/dist-packages/PyYAML-*


##############################################################################
# More customized packages (speedup the launch of docker)
##############################################################################
RUN pip install transformers \
                pytorch-ignite \
                click \
                pre-commit \
                cpufeature \
                jsonlines \
                aiobotocore \
                attr \
                structlog

##############################################################################
## Add fedml user
###############################################################################
# Add a fedml user with user id 8877
#RUN useradd --create-home --uid 8877 fedml
RUN useradd --create-home --uid 1000 --shell /bin/bash fedml
RUN usermod -aG sudo fedml
RUN echo "fedml ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
# # Change to non-root privilege
USER fedml


##############################################################################
## Install Z3
##############################################################################
RUN cd ${STAGE_DIR} && git clone https://github.com/Z3Prover/z3.git &&  cd z3 && python scripts/mk_make.py && cd build && make -j$(nproc) && sudo make install

##############################################################################
## Install capstone
##############################################################################
RUN cd ${STAGE_DIR} && git clone https://github.com/aquynh/capstone.git  && cd  capstone && sudo make -j$(nproc) && sudo ./make.sh install

##############################################################################
## Install boost
##############################################################################
RUN cd ${STAGE_DIR} && wget https://boostorg.jfrog.io/artifactory/main/release/1.76.0/source/boost_1_76_0.tar.gz && tar -xzvf boost_1_76_0.tar.gz && cd boost_1_76_0 && sudo ./bootstrap.sh && sudo ./b2 install

##############################################################################
## Install Triton
##############################################################################
RUN cd ${STAGE_DIR} && git clone https://github.com/JonathanSalwan/Triton.git && cd Triton && mkdir build && cd build && cmake .. && sudo make -j$(nproc) install && cd ../../

##############################################################################
## Install ICU
##############################################################################
RUN cd ${STAGE_DIR} && wget http://github.com/unicode-org/icu/releases/download/release-67-1/icu4c-67_1-src.tgz && tar -xvzf icu4c-67_1-src.tgz && cd icu/source && ./configure --prefix=/usr && sudo make -j$(nproc) && sudo make install

##############################################################################
## Install custom Apex
##############################################################################
RUN cd ${STAGE_DIR} && git clone  https://github.com/NVIDIA/apex.git && cd apex && sudo TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 7.5 8.0" pip3 install -v --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" ./

##############################################################################
## Install TensorboardX
##############################################################################
RUN sudo pip3 install tensorboardX

##############################################################################
# SSH Setup
##############################################################################
# Batch Multi Node
ENV USER fedml
ENV HOME /home/$USER
RUN echo $HOME
RUN sudo pip install supervisor awscli

ENV SSHDIR $HOME/.ssh
RUN sudo mkdir -p ${SSHDIR}
RUN sudo touch ${SSHDIR}/sshd_config
RUN sudo ssh-keygen -t rsa -f ${SSHDIR}/ssh_host_rsa_key -N ''
RUN sudo cp ${SSHDIR}/ssh_host_rsa_key.pub ${SSHDIR}/authorized_keys
RUN sudo cp ${SSHDIR}/ssh_host_rsa_key ${SSHDIR}/id_rsa
RUN sudo chown -R ${USER}:${USER} ${SSHDIR}/
RUN sudo echo "       IdentityFile ${SSHDIR}/id_rsa" >> ${SSHDIR}/config \
&& sudo echo "       StrictHostKeyChecking no" >> ${SSHDIR}/config \
&& sudo echo "       UserKnownHostsFile /dev/null" >> ${SSHDIR}/config \
&& sudo echo "       Port 2022" >> ${SSHDIR}/config \
&& sudo echo 'Port 2022' >> ${SSHDIR}/sshd_config \
&& sudo echo 'UsePrivilegeSeparation no' >> ${SSHDIR}/sshd_config \
&& sudo echo "HostKey ${SSHDIR}/ssh_host_rsa_key" >> ${SSHDIR}/sshd_config
RUN sudo echo "PidFile ${SSHDIR}/sshd.pid" >> ${SSHDIR}/sshd_config
RUN sudo cat ${SSHDIR}/sshd_config
RUN sudo cat ${SSHDIR}/config

RUN sudo chmod -R 600 ${SSHDIR}/*
RUN sudo chown -R ${USER}:${USER} ${SSHDIR}/
RUN eval `ssh-agent -s` && ssh-add ${SSHDIR}/id_rsa

RUN sudo apt install -y iproute2


EXPOSE 22


USER fedml


##############################################################################
# Supervisor container startup
##############################################################################
ADD supervisord.conf /etc/supervisor/supervisord.conf
ADD sync_all_nodes.sh /supervised-scripts/sync_all_nodes.sh
RUN sudo chmod 755 supervised-scripts/sync_all_nodes.sh

##############################################################################
# Entry Point Script
##############################################################################
ADD entry-point.sh /batch-runtime-scripts/entry-point.sh
RUN sudo chmod 0755 /batch-runtime-scripts/entry-point.sh
CMD /batch-runtime-scripts/entry-point.sh

##############################################################################
# Install AWS-OFI-NCCL plugin
##############################################################################
# RUN git clone https://github.com/aws/aws-ofi-nccl.git $HOME/aws-ofi-nccl \



RUN git clone https://github.com/aws/aws-ofi-nccl.git $HOME/aws-ofi-nccl \
    && cd $HOME/aws-ofi-nccl \
    && git checkout aws  \
    && ./autogen.sh \
    && ./configure --prefix=$HOME/aws-ofi-nccl/install \
       --with-libfabric=/opt/amazon/efa/ \
       --with-cuda=/usr/local/cuda \
       --with-mpi=/opt/amazon/openmpi/ \
    && make -j$(nproc) && make install
